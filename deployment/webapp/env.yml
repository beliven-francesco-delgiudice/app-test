---
.env_base: &env_base
  stage: build
  image: alpine:3
  script:
    # Install and configure SSH
    - apk add --no-cache openssh
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $SSH_PORT $CI_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # Install envsubst
    - apk add --update libintl
    - apk add --virtual build_deps gettext
    - cp /usr/bin/envsubst /usr/local/bin/envsubst
    - apk del build_deps
    # Create deploy folder
    - ssh -p $SSH_PORT $SSH_USER@$CI_HOST "mkdir -p $CI_DEPLOY_FOLDER
      && chown root:root $CI_DEPLOY_FOLDER"
    # Create env folder
    - ssh -p $SSH_PORT $SSH_USER@$CI_HOST "mkdir -p $CI_DEPLOY_FOLDER/env
      && chown root:root $CI_DEPLOY_FOLDER/env
      && chmod 700 $CI_DEPLOY_FOLDER/env"
    # Generate .env file for docker-compose
    - envsubst < ./deployment/webapp/env/docker-compose.env.template > ./deployment/webapp/env/.env
    - scp -P $SSH_PORT ./deployment/webapp/env/.env $SSH_USER@$CI_HOST:$CI_DEPLOY_FOLDER/.env

env_staging:
  <<: *env_base
  environment:
    name: staging
    url: https://$DOMAIN
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_BRANCH == staging'
    # - if: '$CI_COMMIT_TAG && $TAG_BRANCH == staging'

# env_production:
#   <<: *env_base
#   environment:
#     name: production
#     url: https://$DOMAIN
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "master"'
